
<!-- Thirdparty intialization scripts, needed for the Google Gears and BrowserPlus runtimes -->

<script type="text/javascript" src="/plupload/js/gears_init.js"></script>
<script type="text/javascript" src="http://bp.yahooapis.com/2.4.21/browserplus-min.js"></script>

<!-- Load plupload and all it's runtimes -->
<script type="text/javascript" src="/plupload/js/plupload.full.min.js"></script>

<script type="text/javascript">
// Custom example logic
$(function() {
//RoR - capture authenticity token  
  var atoken = $("input[name=authenticity_token]").val();  
	var uploader = new plupload.Uploader({
		runtimes : 'gears,html5,flash,silverlight,browserplus',
		browse_button : 'button-holder',
		container : 'container',
		max_file_size : '1mb',
		upload_path: 'uploads/$_SESSION[id]/',
		url : '/images.js',
		flash_swf_url : '/plupload/js/plupload.flash.swf',
		silverlight_xap_url : '/plupload/js/plupload.silverlight.xap',
		//RoR - make sure form is multipart  
      multipart: true,  
//RoR - make sure to send authenticity token and any other parameters that are on the plain html form  
   multipart_params: {  
    "authenticity_token" : '<%= form_authenticity_token %>'  
   }  ,
		filters : [
			{title : "Image files", extensions : "jpg,gif,png"},
			{title : "Zip files", extensions : "zip"}
		],
		resize : {width : 320, height : 240}
	});
	
	
	// Client side form validation  
  $("form").submit(function(e){
      var upload = false;
		  // Validate number of uploaded files
		  // Files in queue upload them first
        if (uploader.files.length > 0) {
            upload = true;
            // When all files are uploaded submit form
            uploader.bind('StateChanged', function() {
                if (uploader.files.length === (uploader.total.uploaded + uploader.total.failed)) {
                    $('form')[0].submit();
                }
            });
             
            uploader.start();

        }else{
           $('form')[0].submit();
        }

        if(upload){
                    e.preventDefault();
                    return false;
        }

//        return false;
       
  });
  
  /*
    $('#uploadfiles').click(function(e) {

       // Files in queue upload them first

        if (uploader.files.length > 0) {

            // When all files are uploaded submit form

            uploader.bind('StateChanged', function() {

                if (uploader.files.length === (uploader.total.uploaded + uploader.total.failed)) {

                   // $('form')[0].submit();

                }

            });

                 
            uploader.settings.multipart_params.type = 'super';
            uploader.start();

        } else {

            alert('You must queue at least one file.');

        }

 

        return false;


    });

  */
  
  uploader.bind('PostInit', function(up, params) {
        // Initialize Preview.
        if(uploader.runtime == "html5") {
            var inputFile = document.getElementById(uploader.id + '_html5');
            var oldFunction = inputFile.onchange;

            inputFile.onchange = function() {
                nativeFiles = this.files;
                oldFunction.call(inputFile);
            }
        }
    });
    
    uploader.bind('Init', function(up, params) {

        $('#filelist').html("<div>Current runtime: " + params.runtime + "</div>");
    });



    uploader.bind('FilesAdded', function(up, files) {   
    for (var i in files) {
            // Your code...

            // Load Preview
            if(uploader.runtime == "html5") {
                var fileObject = uploader.getFile(files[i].id);
                var reader = new FileReader();

                reader.onload = (function(file, id) {
                    return function(e) {
                        
                        var span = document.getElementById('item-pic-holder');
                        span.removeAttribute("class")
                        span.innerHTML = "<img src='"+e.target.result+"' height='150' width='150'/>";
                      };
                })(nativeFiles[i], files[i].id);

                reader.readAsDataURL(nativeFiles[i]);
            }
        }    
           

    });


	uploader.init();

});
</script>

			<div id="container">

    <div id="filelist">No runtime found.</div>

    <br />

    <a id="pickfiles" href="#">[Select files]</a>

    <a id="uploadfiles" href="#">[Upload files]</a>

</div>

